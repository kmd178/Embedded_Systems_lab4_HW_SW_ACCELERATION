#include "xparameters.h"
#include "handshake.h"
#include "xgpio.h"
#include "led_ip.h"

//====================================================
#define N 20
void CPU_test(int X[],int Y[]);
void FPGA_test_reconfigured_AXI(int X[N], int Y[N]);
void FPGA_test_handshake(int X[N], int Y[N]);
int main (void)
{
	  xil_printf("-- Start of the Program --\r\n");
	  //xil_printf("-- idle --\r %x \n", LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG2_OFFSET));
	  int X[N];
	  int Y1[N];
	  int Y2[N];
	  //int Y3[N];
	  int i=0;
	  xil_printf("-- Start of the Program2 --\r\n");
	  for (i=0; i<N ; i++) {
		  X[i]=i;
	  }
	  xil_printf("-- Start of the Program3 --\r\n");
	  CPU_test(X,Y1);
	  xil_printf("-- Start of the Program4 --\r\n");
	  FPGA_test_reconfigured_AXI(X,Y2);
	  //FPGA_test_handshake(X,Y3);

	  xil_printf("Y[%d]=%d \r\n",5, Y2[5]);
}

void CPU_test(int X[],int Y[]){
	int i;
	  for (i=0; i<N ; i++) {
		  Y[N]=X[i]*X[i];
	  }
	return;
}

void FPGA_test_reconfigured_AXI(int X[], int Y[]) {
	  int i;
	 // int D[10];

	  //LED_IP_S_AXI_SLV_REG0_OFFSET  input X
	  //LED_IP_S_AXI_SLV_REG1_OFFSET  output Y
	  //LED_IP_S_AXI_SLV_REG2_OFFSET  output state   debugging
	  //LED_IP_S_AXI_SLV_REG3_OFFSET  output probing debugging
	  xil_printf("--%d idle=0--%d \r\n", X[0],X[1]);
	  //FPGA:Idle_state__slv_reg_rden
	  xil_printf("--idle=0--%d \r\n", LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG2_OFFSET));
	  LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, 0); //start accelerator //this take 2 cycles
	  xil_printf("--setvectorsize=1--%d \r\n", LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG2_OFFSET));
	  //FPGA:set_vector_size__slv_reg_wren
	  LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, N); //start accelerator //this take 2 cycles
	  xil_printf("-- vector_size FPGAprobing:-- %d \r\n",i, LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG3_OFFSET));
	  xil_printf("-- receive_vector=2 --%d \r\n", LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG2_OFFSET));
	  //FPGA:receive_vector___slv_reg_wren  (if the above slv_reg_wren lasts more than 1 cycle then the printed state below will be 5 before we finish loop)
	  for (i=0; i<N ; i++) {							  //sent input vector X
	  	  LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, i);
		  xil_printf("-- C i:%d= FPGA_Y i:%d \r\n",i, LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG1_OFFSET));
		  xil_printf("-- Probing: inputX= --%d \r\n", LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG3_OFFSET));
	  }

	  xil_printf("-- waiting_signal=3--%d \r\n", LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG2_OFFSET));
	  LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, 555);
	  //FPGA:waiting_signal (to start the computation)___slv_reg_rden  (when SLV_REG2==1)



	  //FPGA:computation   (might be stealing the first value of Y[i], because slv_reg_rden remains active for 2 clock cycles)
	  //while(LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG2_OFFSET)==4) {
		  //xil_printf("--Computation_waiting=4--%x \r\n", LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG2_OFFSET));
	  //

	  xil_printf("-- FINISHED while--\r\n");
	  //LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, 10); saving the first value of Y (if last Y[i] are 0 the mReadReg above has affected the output)

	  //FPGA:sent_vector___slv_reg_rden
	  for (i=0; i<N ; i++) {							  //receive output vector Y
		  Y[i]=LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG1_OFFSET);
		  xil_printf("Y[%d]=%d \r\n",i, Y[i]);

	  }
	  xil_printf("--FINISHED RECEIVING VECTOR idle=0--%d \r\n", LED_IP_mReadReg(XPAR_LED_IP_S_AXI_BASEADDR,LED_IP_S_AXI_SLV_REG2_OFFSET));
	  return;
}

void FPGA_test_handshake(int X[], int Y[]) {
	  int i;
	  xil_printf("-- idle --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));
	  HANDSHAKE_mWriteReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR, HANDSHAKE_S00_AXI_SLV_REG3_OFFSET, 1); //start accelerator

	  xil_printf("-- receive LENGTH --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));
	  HANDSHAKE_mWriteReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,0,N); //sent array size info
	  //xil_printf("-- receive LENGTH1 --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));
	  HANDSHAKE_mWriteReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR, HANDSHAKE_S00_AXI_SLV_REG3_OFFSET, 2);
	 // xil_printf("-- receive LENGTH1 --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));

	  xil_printf("-- receive vector --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));
	  for (i=0; i<=N ; i++) {							  //sent input vector X
	  	  HANDSHAKE_mWriteReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR, 0, X[i]);
	  	  HANDSHAKE_mWriteReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR, HANDSHAKE_S00_AXI_SLV_REG3_OFFSET, i);
		  xil_printf("-- receive vector --\r %x %d\n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET),i);

	  }


	  HANDSHAKE_mWriteReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR, HANDSHAKE_S00_AXI_SLV_REG3_OFFSET, 1); //start computation
	  xil_printf("-- waitin --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));
	  //xil_printf("-- Stdam2 --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));
	 // HANDSHAKE_mWriteReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR, 0, 0); //start computation

	 // xil_printf("-- Stdam3 --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));
	  for (i=0; i<99999999; i++);
	  //while(!HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET)) {} //freeze while accelerator computes the result
	  //xil_printf("-- Stdam4 --\r %x \n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG2_OFFSET));
	  for (i=0; i<N ; i++) {
		  HANDSHAKE_mWriteReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR, HANDSHAKE_S00_AXI_SLV_REG3_OFFSET, i);//receive output vector Y
		  Y[i]=HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG1_OFFSET);
		  xil_printf("-- mesa --\r %d %d\n", i,Y[i]);

	  }
	  xil_printf("-- Stdam5 --\r %x \n");
	  //reading the value of grayout,  HANDSHAKE_S00_AXI_SLV_REG1_OFFSET=4  4*8bytes after slv1


	  //xil_printf("Current counter value: %x\r\n", HANDSHAKE_mReadReg(XPAR_HANDSHAKE_S00_AXI_BASEADDR,HANDSHAKE_S00_AXI_SLV_REG1_OFFSET) );
	  return;
}

